from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup

from handlers.user_handlers import send_menu
from service.file_service import FileService
from service.freelancer_service import FreelancerService
from service.order_service import OrderService
from service.order_types_service import OrderTypeService
from service.status_service import StatusService
from service.subject_service import SubjectService
from service.user_service import UserService
from states.order_states import OrderStates
from utils.keyboards import get_order_actions_keyboard, get_orders_list_keyboard, get_cancel_order_button
from utils.logger import log_interaction, log_exception

order_service = OrderService()
user_service = UserService()
status_service = StatusService()
freelancer_service = FreelancerService()
file_service = FileService()
order_type_service = OrderTypeService()
subnject_service = SubjectService()


async def show_available_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç–∞—Ç—É—Å '–í –æ–∂–∏–¥–∞–Ω–∏–∏')"""
    user = user_service.get_by_user_id(message.from_user.id)

    if user.role_id >= 5:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤)
        return

    orders = order_service.get_orders_by_status_id(1)  # –°—Ç–∞—Ç—É—Å 1 - "–í –æ–∂–∏–¥–∞–Ω–∏–∏"
    if not orders:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        return

    keyboard = get_orders_list_keyboard(orders)
    await message.answer("üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:", reply_markup=keyboard)
    await log_interaction(f"User {message.from_user.id} viewed orders list")


async def view_order_details(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    order_id = int(callback.data.split("-")[1])
    order = order_service.get_by_id(order_id)
    user = user_service.get_by_user_id(callback.from_user.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = f"""
üìù –ó–∞–∫–∞–∑ #{order.id}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
üóÇ –¢–∏–ø: {order_type_service.get_by_id(order.order_type_id).name}
üìö –ü—Ä–µ–¥–º–µ—Ç: {subnject_service.get_by_id(order.subject_id).name}
üîÆ –°—Ç–∞—Ç—É—Å: {status_service.get_by_id(order.status_id).state}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:
{order.order_text}
    """

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = get_order_actions_keyboard(order, user)

    await callback.message.edit_text(order_text, reply_markup=keyboard)
    await log_interaction(f"User {callback.from_user.id} viewed order {order.id}")


async def accept_order(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É"""
    order_id = int(callback.data.split("-")[1])
    user = user_service.get_by_user_id(callback.from_user.id)

    order = order_service.get_by_id(order_id)
    order.freelancer_id = user.id
    order.status_id = 2  # –°—Ç–∞—Ç—É—Å "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    order_service.update(order)


    async with state.proxy() as data:
        data['order_id'] = order.id
        data['step'] = 'accept_order'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    order_files = file_service.get_file(order_id)
    print(order_files)
    if order_files:
        await callback.bot.send_document(
            callback.from_user.id,
            document=order_files,
            caption=f"–§–∞–π–ª—ã –∫ –∑–∞–∫–∞–∑—É #{order.id}"
        )

    await callback.message.edit_text(f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ #{order.id}",
                                     reply_markup=InlineKeyboardMarkup().add(get_cancel_order_button()))
    await OrderStates.waiting_for_response.set()
    await log_interaction(f"User {callback.from_user.id} accepted order {order.id}")


async def submit_order_response(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É"""
    data = await state.get_data()
    order_id = data['order_id']
    freelancer = user_service.get_by_user_id(message.from_user.id)
    order = order_service.get_by_id(order_id)

    if not message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –æ—Ç–≤–µ—Ç–∞
    file_path = f"orders/{order_id}/response_{freelancer.id}_{message.document.file_name}"
    await message.document.download(destination_file=file_path)
    file_service.post_answer_file(order.user_id, order_id, file_path)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞–∫–∞–∑—á–∏–∫–∞
    customer = user_service.get_by_id(order.user_id)
    await message.bot.send_document(
        customer.user_id,
        document=message.document.file_id,
        caption=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order.status_id = 3
    order_service.update(order)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
    order_type = order_type_service.get_by_id(order.order_type_id)
    freelancerst = freelancer_service.get_by_user_id(freelancer.id)
    freelancerst.amount = freelancerst.amount + 1
    freelancerst.salary = float(freelancerst.salary) + order_type.price
    freelancer_service.update(freelancerst)

    await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É!")
    await state.finish()
    await log_interaction(f"Freelancer {freelancer.id} submitted response for order {order_id}")


async def cancel_order(query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data["order_id"]
        order = order_service.get_by_id(order_id)
        order.status_id = 1
        order.freelancer_id = None
        order_service.update(order)
        await state.finish()
        await query.message.edit_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω")
    except Exception as e:
        await log_exception(e, "cancel_order")

async def back_to_orders(query: types.CallbackQuery, state: FSMContext):
    try:
        orders = order_service.get_orders_by_status_id(1)
        if not orders:
            await query.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            return

        keyboard = get_orders_list_keyboard(orders)
        await query.message.edit_text("üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:", reply_markup=keyboard)
    except Exception as e:
        await log_exception(e, "back_to_orders")


def register_order_management_handlers(dp):
    dp.register_message_handler(
        show_available_orders,
        commands=["orders"],
        state="*"
    )

    dp.register_callback_query_handler(
        view_order_details,
        lambda c: c.data.startswith("view_order-"),
        state="*"
    )

    dp.register_callback_query_handler(
        accept_order,
        lambda c: c.data.startswith("accept_order-"),
        state="*"
    )

    dp.register_message_handler(
        submit_order_response,
        content_types=["document"],
        state=OrderStates.waiting_for_response
    )

    dp.register_callback_query_handler(
        cancel_order,
        lambda c: c.data == "cancel-order",
        state=OrderStates.waiting_for_response
    )
    dp.register_callback_query_handler(
        back_to_orders,
        lambda c: c.data == "back_to_orders"
    )
